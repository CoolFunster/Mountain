import Base.Data.String ->
import Base.Data.Bool ->
import Base.Imperative.While.While ->
import Body.SimpleConsole.ConsoleModule ->
import Main: body.SimpleConsole.ConsoleProgram ->

Main :: function (c, p_arg, k_arg) -> {
  my_secret_number: 5;
  max_guesses: 10;
  while_loop: {
    state: (<Console>, Maybe Int, Int);
    state :: init_state: (c, #Nothing, my_secret_number);
    (state -> Bool) :: condition = |
      (c, #Nothing, my_secret_number) -> #False,
      (c, (#Something, num), my_secret_number) -> num == my_secret_number
    |;

    return while (max_guesses) (init_state) (condition);
  };
  
  result = while_loop ((c, prev_guess, num) -> {
    (c, input_result) = 
      input (c, "Guess a natural number: ")

    result@(Maybe Int) = 
      as_int(input_result)

    return (c, result, num)
  })

  return (
    result >> |
      $Nothing -> (print "Game Over!\n")
      (c, _, _) -> (print "You win!!!\n")
    |,
    0
  )
}
