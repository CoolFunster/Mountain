import list:$base.linkedlist
-> import string:$base.string
-> import natural:$base.natural
-> define Id:|
    name:$string,
    index:$natural,
    `Unnamed
  |
-> define SpecialType:|
    `Flexible,
    `Any
  |
-> define CompositeType:|
    `Tuple,
    `Either,
    `Function,
    `Composition,
    `Match
  |
-> define VariableType:|
    `Label,
    `Element,
    `Resolved
  |
-> define Category:|
    thing:          (`Thing, name:$Id),
    composite:      (`Composite, composite_type:$CompositeType, inner_categories:$list[$Category]),
    placeholder:    (`Variable, variable_kind:$VariableType, variable_category:$Category),
    refined:        (`Refined, base:$Category, predicate:(`Composite, `Function, $list[$Category]),
    special:        (`Special, special_type:$SpecialType),
    reference:      (`Reference, name:$Id),
    function_call:  (`Call, base:(`Composite, `Function, $list[$Category]), argument:$Category),
    access:         (`Access, base:$Category, access_id:$Id),
    import:         (`Import, import_category:$Category),
    definition:     (`Definition, def_category:$Category),
    membership:     (`TypeAnnotation, big_category:$Category, small_category:$Category)
  |
-> return (
  id_type:$Id,
  special_category_type:$SpecialType,
  composite_type:$CompositeType,
  variable_kind:$VariableType,
  category:$Category,
)