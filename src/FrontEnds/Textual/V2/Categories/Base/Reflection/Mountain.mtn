Mountain: 
  import (
    Data.String,
    Data.Numeric.Natural,
    Data.LinkedList,
    Data.Bool
  ) -> (
    Id: |
      (#Name, String),
      (#Index, Nat),
      #Unnamed
    |,
    SpecialType:|
      #Flexible,
      #Any
    |,
    DataCompositeType:|
      #Tuple, #Either
    |,
    FunctionCompositeType:|
      #Function, #Composition, #Match
    |
    CompositeType:|
      DataCompositeType,
      FunctionCompositeType,
    |,
    VariableType:|
      #Label,
      #Element,
      #Resolved
    |,
    Category:|
      (#Thing, name@Id),
      (#Unique, inner@Category),
      (#Composite, 
          composite_type@CompositeType, 
          inner_categories@(List Category),
      ),
      (#Variable, 
          placeholder_type@VariableType),
          placeholder_category@Category,
      ),
      (#Refined,
          base@Category,
          predicate@(#Composite, #Function, [base, Bool]),
      ),
      (#Special,
          special_type@SpecialType,
      ),
      (#Reference,
          name@Id,
      ),
      (#FunctionCall,
          base@(#Composite, |#Function, #Composition, #Match|, List Category),
          argument@Category,
      ),
      (#Access,
          base@Category,
          access_id@Id
      ),
      (#Import,
          import_category@Category
      ),
      (#Definition,
          def_category@Category
      ),
      (#Membership,
          big_category@Category,
          small_category@Category
      )
    |
  )