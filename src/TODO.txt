- nested relabeling upon function call
  (handles structural pattern matching)
- strings
- builtin parsing of numbers, strings, & lists
- debugging has and call

dev tooling
- typechecking
- unbound references
- vscode coloring
- autocomplete

Current Job

Backlog
  Subtractive Access
    access with dot operator
  StdLib Strings
  Sets & types 
    123. -> float
    123 -> integer
    n123 -> nat
    "" - strings
    ^, V, - Set operations
  Parser Additions
    Type - sets whose rank is 1 or greater
  validate parser by writing some of the standard library
    linked list (in progress)
  validation
    Function return must only be last element
    Binding can only appear within a scope
    Files must have label
    Sets cannot be recursive
    Type annotations need rank 1
  Refinements
  Rename Category to something else (Won't do)
  Rank of Category
  Builtin parse
    String
    Float
    Integer
    Bool
  ignore training commas/semicolons
  improve parser error messages
  operator presidence?
    probably not
  Rename Category as Structure

Completed:
  -Add sets (DONE)
  -Rename Placeholder back to Placeholder, to reflect mountain docs (DONE)
  -Implement Binding and delete Definition (Done)
    refactor call (Done)
    Implement "chain" (won't do)
  -Imports need reworking (Done)
  -Update has rules for new def of category not having itself (Done)
    label has just that category
    placeholder has means pc has small
  Update Parser (Done)
    Function instead of given (Done)
    _@v means unnamed placeholder with type v
    x or x@_ means a placeholder of type Any
  Flexible needs a name & palceholder (Done)
  Update Access (Done)
    Refactor to have access type with args
    Fix parser to include []
    Fix so ID no longer needs qualification
    Tests
  Scope & Binding needs implementation (Done)
    resolve
    eval
  Types of imports 
    Direct import   -> import (Data.String)
    relabel import  -> import (x:Data.String)
    hiding import   -> import (x:Data.String.-["String"])
    sub import      -> import ()
  Binding as (:) (DONE)
  Parser
    remove @ and replace with ::(<varname>)
    backtick is infix operator
      on definition if backtick then non backtick is infix
  Parser presidence
    Labels
    Functions
    Call
    type annotations
    std categories
  Import
    import imports a single reference & access
