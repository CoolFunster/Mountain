Set: 
  import Base.Data.Basic.Bool ->
  import Base.Data.Basic.Property ->
  Type::a -> (
    Set: a -> |
      empty: {},
      single: a::x -> {x},
      `V: (Set a -> Set a -> Set a)::`V,
      `^: (Set a -> Set a -> Set a)::`^,
      `-: (Set a -> Set a -> Set a)::`-,
      refined: s:(Set a) -> p:Prop -> {s | p}
    |,
    `elem: (Any -> Set k -> Bool):: e -> |
      Set.empty -> False;
      (Set.single x) -> x is e;
      a V b -> (elem a) or (elem b);
      a ^ b -> (elem a) and (elem b);
      a - b -> (elem a) and (not (elem b));
      (Set.refined s p) -> y -> (y)
    |,
    foreach : (Set Any)::s -> (s::x -> z) -> Set z :: |
      {}                     -> _ -> {};
      {a}                    -> f -> {f a};
      {s | p}                -> f -> foreach s (s::x -> (p x `| #False -> {}, #True -> {f x}|))
      (op:|`V, `^, `-|) a b  -> f -> (for a f) op (for b f);
    |
) 
