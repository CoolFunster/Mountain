Equality:
  import Base.Data.Basic.Property -> 
  import Base.Data.Basic.Set -> (
    `is: a -> b -> |
      a -> |
        a -> #True;
        b -> #False;
      |
    |,
    BasicRules: {
      reflect: a -> a -> (a,a),
      rewrite: (a,b) -> a -> b,
      flip: (a,b) -> (b,a),
      transitive: (a ,b) -> (b,c) -> (a,c),
      substitute: (a,b) -> (a,c) -> (b,c),
    },
    EqProof: a -> b -> {
      (lhs:a -> c,rhs:b -> c) | 
        (lhs isStructureOf ({a} V BasicRules)) and 
        (rhs isStructureOf ({b} V BasicRules)) 
    },
    Type::Eq: a -> b -> |
      same: {(a,b) | (a is b)},
      equivalent: Proof a b::p -> {(a,b) | or 
        exists {
          proof:(lhs:a -> c,rhs:b -> c) | 
            (lhs isStructureOf ({a} V BasicRules)) and 
            (rhs isStructureOf ({b} V BasicRules))
        }
    }, 
    Prop::`= : a -> b -> | 
      (a is b) or 
    